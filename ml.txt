Week - 1:

1. import pandas as pd
   df = pd.read_csv('')			//READ CSV
   print(df)
2. rows, cols = df.shape		//DIMENSIONS
3. df.head(5)				//TOP 5 AND TOTAL DATA
4. df.columns				//COLUMNS
5. df.rename(columns = {'Temperature': 'Temp'},inplace = True)   //REPLACE COLUMN NAME
6. df.[['Date', 'Temp']]			//DISPLAY SINGLE COLUMN
7. df3 = pd.concat([df1,df2]).reset_index(drop = True)		//BIND ROW
8. df4 = pd.concat([df1,df2], axis= 1).reset_index(drop = True)		//BIND COLUMN
9. df.isnull()


Week - 2:

1. df['Temperature'].mean() , df['Temperature'].median(), df.['Temperature'].mode() 	//CENTRAL TENDENCY
2. df.describe()							//MEASURES OF DATA SPREAD
3. df['Temperature'].var()   df.['Temperature'].std()						//VARIANCE  && STANDARD DEVIATION
4. q1  = np.percentile(df['Temperature'], 25, interpolation = 'midpoint')		
   q2  = np.percentile(df['Temperature'], 50, interpolation = 'midpoint')	//QUARITLES, INTERQUARTILE RANGE
   q3  = np.percentile(df['Temperature'], 75, interpolation = 'midpoint')
   IQR = q3-q1

Week - 3:

1. import matplot.lib.pyplot as plt 
   import seaborn as sns
   sns.boxplot(X = 'Species', y= 'Weight', data = df) Wing, Tail, Weight are the predictors	//BOX PLOT FOR 4 PREDICTORS
   plt.show()
2. sns.boxplot(x = df['feature_name']) 
   sns.despine()
   plt.title(" ") plt.xlabel(" ") plt.ylabel(" ")					//BOXPLOT FOR SINGLE FEATURE
   plt.show()
3. sns.histplot(data = df, x='Weight')						//HISTOGRAM
   plt.show()	
4. df.plot(kind = 'scatter', x = 'Tail', y = 'Wing')			
   plt.grid() 									//SCATTER PLOT
   //sns.scatterplot(x = 'sepal_length', y = 'petal_length', data = df)//

Week - 4:

1. for col in df.columns:
  	df[col].replace('?', None, inplace = True)
   df.isnull().sum()

   i) max = df['Weight'].quantile(0.95)
      min = df['Weight'].quantile(0.05)
      df[(df['Weight']>max) | (df['Weight']<min)]  //PERCENTILES

   ii) df.Tail.mean()
       df.Tail.std()
       max = df.Tail.mean() + 3*df.Tail.std() 
       min = df.Tail.mean() - 3*df.Tail.std()  // STANDARD DEVIATION 
       print the df using the same logic	    

   iii) df['zsore'] = (df.Tail - df.Tail.mean()) / df.Tail
        df.head(5) 
        df[df['zsore']>0.2] 			//ZSCORE

   iv) q1 = df['Weight'].quantile(0.95)
       q3 = df['Weight'].quantile(0.05)
       IQR = q2-q1	
       low = q1- 1.5*IQR 
       high = q3 + 1.5*IQR        	//INTERQUARTILE RANGES

2. df.dropna()			//NULL VALUES REMOVAL
3. df.['Weight'].clip(min,max,inplace = True)   //CAPPING VALUES
4. std = df[(df['Weight']<=max) | (df['Weight']>=min)]     //INPUTING STANDARD VALUES


Week- 5 :

from sklearn.model_selection import KFold
from sklearn.metrics import mean_squared_error
from sklearn.linear_model import LinearRegression
import numpy as np
n_splits = 5
mse_scores_cv = []
kf = KFold(n_splits=n_splits)
for train_index, test_index in kf.split(X):
  X_train_cv, X_test_cv = X[train_index], X[test_index]
  y_train_cv, y_test_cv = y[train_index], y[test_index]
  model_cv = LinearRegression()
  model_cv.fit(X_train_cv, y_train_cv)
  y_pred_cv = model_cv.predict(X_test_cv)
  mse_cv = mean_squared_error(y_test_cv, y_pred_cv)
  mse_scores_cv.append(mse_cv)

avg_mse_CV = np.mean(mse_scores_cv)
print("K-Fold Cross Validation MSE:", avg_mse_CV)
